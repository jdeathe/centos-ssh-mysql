#!/usr/bin/env bash

# Create lock file
touch /var/lock/subsys/mysqld-bootstrap

TIMER_START="$(
	date +%s.%N
)"

source /etc/mysqld-bootstrap.conf

function get_mysql_user_host ()
{
	local CLIENT_SUBNET="${1:-127.0.0.1}"
	local VALUE

	case "${CLIENT_SUBNET}" in
		0.0.0.0|0.0.0.0/0.0.0.0)
			# Connect from any network
			VALUE="%"
			;;
		127.0.0.1)
			# Internal connection
			VALUE="localhost"
			;;
		*)
			# User defined host / subnet
			VALUE="${CLIENT_SUBNET}"
			;;
	esac

	printf -- "%s" "${VALUE}"
}

function get_option ()
{
	local VALUE=$(
		/usr/bin/my_print_defaults "${1}" | \
		sed -n "s/^--${2}=//p" | \
		tail -n 1
	)

	printf -- "%s" "${VALUE:-$3}"
}

function get_password ()
{
	local LENGTH="${1:-16}"
	local PASSWORD="$(
		head -n 4096 /dev/urandom \
		| tr -cd '[:alnum:]' \
		| cut -c1-"${LENGTH}"
	)"

	printf -- "%s" "${PASSWORD}"

	return 0
}

function have_mysql_access ()
{
	local DB_USER="${1:-root}"
	local DB_PASSWORD="${2:-}"
	local DB_NAME="${3:-mysql}"

	if mysql \
		--protocol=socket \
		--user="${DB_USER}" \
		--password="${DB_PASSWORD}" \
		-e "use ${DB_NAME}" \
		2> /dev/null; then
		return 0
	fi

	return 1
}

function is_mysql_data_directory_populated ()
{
	local MYSQL_DATA_DIRECTORY="${1:-/var/lib/mysql}"

	# Test for the InnoDB shared tablespace
	if [[ -f ${MYSQL_DATA_DIRECTORY}/ibdata1 ]]; then
		return 0
	fi

	return 1
}

OPTS_MYSQL_DATA_DIR="$(
	get_option \
		mysqld \
		datadir \
		"/var/lib/mysql"
)"

# MySQL initialisation is a one-shot process.
if ! is_mysql_data_directory_populated "${OPTS_MYSQL_DATA_DIR}"; then

	readonly PASSWORD_LENGTH=16
	readonly REDACTED_VALUE="********"

	OPTS_CUSTOM_MYSQL_INIT_SQL="${CUSTOM_MYSQL_INIT_SQL:-}"
	OPTS_MYSQL_INIT_LIMIT="${MYSQL_INIT_LIMIT:-30}"
	OPTS_MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD:-$(get_password ${PASSWORD_LENGTH})}"
	OPTS_MYSQL_ROOT_PASSWORD_HASHED="${MYSQL_ROOT_PASSWORD_HASHED:-false}"
	OPTS_MYSQL_SERVICE_USER="$(
		get_option \
			mysqld \
			user \
			"mysql"
	)"
	OPTS_MYSQL_SOCKET="$(
		get_option \
			mysqld \
			socket \
			"/var/run/mysqld/mysql.sock"
	)"
	OPTS_MYSQL_SOCKET_DIR="${OPTS_MYSQL_SOCKET%/*}"
	OPTS_MYSQL_USER="${MYSQL_USER:-}"
	OPTS_MYSQL_USER_DATABASE="${MYSQL_USER_DATABASE:-}"
	OPTS_MYSQL_USER_HOST="$(
		get_mysql_user_host \
		"${MYSQL_SUBNET:-127.0.0.1}"
	)"
	OPTS_MYSQL_USER_PASSWORD="${MYSQL_USER_PASSWORD:-$(get_password ${PASSWORD_LENGTH})}"
	OPTS_MYSQL_USER_PASSWORD_HASHED=${MYSQL_USER_PASSWORD_HASHED:-false}

	# Adjust the UID/GID values of the service user to match a directory that 
	# could be a mounted volume
	if [[ -d ${OPTS_MYSQL_DATA_DIR} ]]; then
		SERVICE_UID="$(
			stat \
				-c \
				"%u" \
				"${OPTS_MYSQL_DATA_DIR}"
		)"
		SERVICE_GID="$(
			stat \
				-c \
				"%g" \
				"${OPTS_MYSQL_DATA_DIR}"
		)"
		MYSQL_SERVICE_USER_UID="$(
			id \
				-u \
				"${OPTS_MYSQL_SERVICE_USER}"
		)"
		MYSQL_SERVICE_USER_GID="$(
			id \
				-g \
				"${OPTS_MYSQL_SERVICE_USER}"
		)"

		if [[ -n ${SERVICE_UID} ]] && [[ ${SERVICE_UID} -ne 0 ]] \
			&& [[ ${SERVICE_UID} != "${MYSQL_SERVICE_USER_UID}" ]]; then
			usermod \
				-u \
				"${SERVICE_UID}" \
				"${OPTS_MYSQL_SERVICE_USER}"
			chown \
				-R \
				"${OPTS_MYSQL_SERVICE_USER}" \
				"${OPTS_MYSQL_SOCKET_DIR}"
		fi

		if [[ -n ${SERVICE_GID} ]] && [[ ${SERVICE_GID} -ne 0 ]] \
			&& [[ ${SERVICE_GID} != "${MYSQL_SERVICE_USER_GID}" ]]; then
			groupmod \
				-g \
				"${SERVICE_GID}" \
				"${OPTS_MYSQL_SERVICE_USER}"
		elif [[ -n ${SERVICE_GID} ]] && [[ ${SERVICE_GID} -ne 0 ]]; then
			# Add as a supplementary group
			usermod \
				-G \
				"${SERVICE_GID}" \
				"${OPTS_MYSQL_SERVICE_USER}"
		fi
	fi

	echo "Initalising MySQL data directory."
	mysql_install_db \
		--force \
		--skip-name-resolve \
		--skip-networking \
		--tmpdir="${OPTS_MYSQL_DATA_DIR}" \
		&
	PIDS[0]=${!}

	MYSQL_INIT_SQL_DATABASE_TEMPLATE="-- Create database"
	if [[ -n ${OPTS_MYSQL_USER_DATABASE} ]]; then
		printf \
			-v MYSQL_INIT_SQL_DATABASE_TEMPLATE \
			-- "%s\nCREATE DATABASE IF NOT EXISTS \`%s\`;" \
			"${MYSQL_INIT_SQL_DATABASE_TEMPLATE}" \
			"{{MYSQL_USER_DATABASE}}"
	fi

	MYSQL_INIT_SQL_USER_TEMPLATE="-- Create user"
	if [[ -n ${OPTS_MYSQL_USER} ]] \
		&& [[ -n ${OPTS_MYSQL_USER_HOST} ]]; then

		MYSQL_INIT_SQL_IDENTIFIED_BY="IDENTIFIED BY"
		if [[ ${OPTS_MYSQL_USER_PASSWORD_HASHED} == true ]]; then
			MYSQL_INIT_SQL_IDENTIFIED_BY+=" PASSWORD"
		fi

		printf \
			-v MYSQL_INIT_SQL_USER_TEMPLATE \
			-- "%s\nCREATE USER '%s'@'%s' \n%s '%s';" \
			"${MYSQL_INIT_SQL_USER_TEMPLATE}" \
			"{{MYSQL_USER}}" \
			"{{MYSQL_USER_HOST}}" \
			"${MYSQL_INIT_SQL_IDENTIFIED_BY}" \
			"{{MYSQL_USER_PASSWORD}}"
	fi

	MYSQL_INIT_SQL_PRIVILEGES_TEMPLATE="-- Grant privileges"
	if [[ -n ${OPTS_MYSQL_USER} ]] \
		&& [[ -n ${OPTS_MYSQL_USER_DATABASE} ]] \
		&& [[ -n ${OPTS_MYSQL_USER_HOST} ]]; then
		printf \
			-v MYSQL_INIT_SQL_PRIVILEGES_TEMPLATE \
			-- "%s\nGRANT %s \nON \`%s\`.* \nTO '%s'@'%s';" \
			"${MYSQL_INIT_SQL_PRIVILEGES_TEMPLATE}" \
			"ALL PRIVILEGES" \
			"{{MYSQL_USER_DATABASE}}" \
			"{{MYSQL_USER}}" \
			"{{MYSQL_USER_HOST}}"
	fi

	# Generate the initialisation SQL used secure MySQL
	tee \
		/tmp/mysql-init-template \
		<<-EOT

		-- =============================================================================
		-- Initialisation SQL
		-- -----------------------------------------------------------------------------
		-- Secure MySQL
		DROP DATABASE IF EXISTS test;
		DELETE FROM mysql.user WHERE User='' OR User='root' AND Host != 'localhost';
		DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
		${MYSQL_INIT_SQL_DATABASE_TEMPLATE}
		${MYSQL_INIT_SQL_USER_TEMPLATE}
		-- =============================================================================
		-- Custom Initialisation SQL start
		-- 
		${OPTS_CUSTOM_MYSQL_INIT_SQL}
		-- 
		-- Custom Initialisation SQL end
		-- -----------------------------------------------------------------------------
		${MYSQL_INIT_SQL_PRIVILEGES_TEMPLATE}
		GRANT ALL PRIVILEGES 
		ON *.* 
		TO 'root'@'localhost' 
		IDENTIFIED BY '{{MYSQL_ROOT_PASSWORD}}' 
		WITH GRANT OPTION;
		FLUSH PRIVILEGES;
	EOT

	# Each statement must be on a single line and should not include comments.
	cat \
		-s \
		/tmp/mysql-init-template \
		| \
	sed \
		-e '/^[ \t]*--.*$/d' \
		-e 's/;[ \t]*--.*$/;/g' \
		-e '/^$/d' \
		-e "s~{{MYSQL_ROOT_PASSWORD}}~${OPTS_MYSQL_ROOT_PASSWORD}~g" \
		-e "s~{{MYSQL_USER}}~${OPTS_MYSQL_USER}~g" \
		-e "s~{{MYSQL_USER_DATABASE}}~${OPTS_MYSQL_USER_DATABASE}~g" \
		-e "s~{{MYSQL_USER_HOST}}~${OPTS_MYSQL_USER_HOST}~g" \
		-e "s~{{MYSQL_USER_PASSWORD}}~${OPTS_MYSQL_USER_PASSWORD}~g" \
		| \
	awk \
		'{ ORS=( /;$/ ? RS:FS ) } 1' \
		> /tmp/mysql-init

	# Wait for the MySQL system table installation to complete
	[[ -n ${PIDS[0]} ]] && wait ${PIDS[0]}

	echo "Initialising MySQL."
	mysqld_safe \
		--skip-networking \
		--init-file=/tmp/mysql-init \
		&

	# Wait for the MySQL database to be initialised by testing 
	COUNTER=$((
		2 * OPTS_MYSQL_INIT_LIMIT
	))
	until (( COUNTER == 0 )); do
		sleep 0.5

		if have_mysql_access root "${OPTS_MYSQL_ROOT_PASSWORD}" mysql; then

			# Set the password if it was supplied pre-hashed.
			if [[ ${OPTS_MYSQL_ROOT_PASSWORD_HASHED} == true ]]; then
				mysql \
					--password="${OPTS_MYSQL_ROOT_PASSWORD}" \
					-e "SET PASSWORD = '${OPTS_MYSQL_ROOT_PASSWORD}'"
			fi

			break
		fi

		(( COUNTER -= 1 ))
	done

	if [[ ${COUNTER} -eq 0 ]]; then
		printf \
			-- "MySQL initilisation failed after %s seconds.\n" \
			"${OPTS_MYSQL_INIT_LIMIT}"

		killall \
			-15 \
			mysqld

		exit 1
	else
		echo "Stopping MySQL."

		# Prefer mysqladmin shutdown method if password is known
		if [[ ${OPTS_MYSQL_ROOT_PASSWORD_HASHED} == true ]]; then
			killall \
				-w \
				-15 \
				mysqld
		else
			mysqladmin \
				--user=root \
				--password="${OPTS_MYSQL_ROOT_PASSWORD}" \
				shutdown
		fi

		rm -f \
			/tmp/mysql-init{,-template}
	fi

	if [[ -n ${MYSQL_ROOT_PASSWORD} ]]; then
		 OPTS_MYSQL_ROOT_PASSWORD="${REDACTED_VALUE}"
		 MYSQL_ROOT_PASSWORD="${REDACTED_VALUE}"
	fi

	if [[ -n ${MYSQL_USER_PASSWORD} ]]; then
		 OPTS_MYSQL_USER_PASSWORD="${REDACTED_VALUE}"
		 MYSQL_USER_PASSWORD="${REDACTED_VALUE}"
	fi

	# Local root user details
	printf \
		-v DETAILS_MYSQL_USER_CREDENTIALS \
		-- "user : %s@%s, password : %s" \
		root \
		localhost \
		"${OPTS_MYSQL_ROOT_PASSWORD}"

	if [[ -n ${OPTS_MYSQL_USER} ]] \
		&& [[ -n ${OPTS_MYSQL_USER_PASSWORD} ]]; then
		printf \
			-v DETAILS_MYSQL_USER_CREDENTIALS \
			-- "%s\nuser : %s@%s, password : %s" \
			"${DETAILS_MYSQL_USER_CREDENTIALS}" \
			"${OPTS_MYSQL_USER}" \
			"${OPTS_MYSQL_USER_HOST}" \
			"${OPTS_MYSQL_USER_PASSWORD}"
	fi

	TIMER_TOTAL="$(
		echo - | awk "\
		{ T1=\"${TIMER_START}\" } \
		{ T2=\"$(date +%s.%N)\" } \
		{ print T2 - T1; }"
	)"

	cat \
		<<-EOT

		================================================================================
		MySQL Details
		--------------------------------------------------------------------------------
		database : ${OPTS_MYSQL_USER_DATABASE:-N/A}
		${DETAILS_MYSQL_USER_CREDENTIALS}
		--------------------------------------------------------------------------------
		${TIMER_TOTAL}

	EOT
fi

# Release lock file
rm -f /var/lock/subsys/mysqld-bootstrap

exit 0
