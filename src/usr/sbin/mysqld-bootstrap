#!/usr/bin/env bash

set -e

function __cleanup ()
{
	local -r exit_code="${?}"

	__delete_lock

	if [[ ${exit_code} -eq 0 ]]
	then
		__create_state
	fi
}

# Set MySQL client root user password
# - Prefer to store encrypted via mysql_config_editor.
# - Fallback to store as plaintext in secured file.
function __configure_mysql_client_root_password ()
{
	local -r password="${1}"

	local config
	local fifo_path
	local mypasswd_fd
	local -a pids

	if [[ -z ${password} ]]
	then
		return 1
	fi

	if command -v mysql_config_editor &> /dev/null \
		&& command -v sshpass &> /dev/null
	then
		fifo_path="$(
			mktemp -d
		)"

		trap "__cleanup; \
				rm -rf \"${fifo_path}\";" \
			EXIT INT TERM

		mkfifo \
			-m 0600 \
			"${fifo_path}/mypasswd"

		exec \
			{mypasswd_fd}<>"${fifo_path}/mypasswd"

		trap "__cleanup; \
				exec {mypasswd_fd}>&- ;" \
			EXIT INT TERM

		rm -rf \
			"${fifo_path}"

		# Send into background waiting to read the password
		sshpass \
			-d ${mypasswd_fd} \
			mysql_config_editor \
				set \
				--skip-warn \
				--password \
				&
		pids[1]="${!}"

		trap "__cleanup; \
				exec {mypasswd_fd}>&- ; \
				[[ ${pids[1]} -gt 0 ]] && kill -9 ${pids[1]};" \
			EXIT INT TERM

		printf -- \
			'%s\n' \
			"${password}" \
			>&${mypasswd_fd} \
			&
		pids[2]="${!}"

		trap "__cleanup; \
				exec {mypasswd_fd}>&- ; \
				[[ ${pids[1]} -gt 0 ]] && kill -9 ${pids[1]}; \
				[[ ${pids[2]} -gt 0 ]] && kill -9 ${pids[2]};" \
			EXIT INT TERM

		set +e
		if [[ ${pids[1]} -gt 0 ]]
		then
			wait ${pids[1]}
		fi

		if [[ ${?} -ne 0 ]]
		then
			>&2 printf -- \
				'ERROR: %s failed to set client root password - aborting\n' \
				"${0##*/}"
			exit 1
		fi
		set -e

		trap - \
			EXIT INT TERM

		exec {mypasswd_fd}>&-
	else
		tee /root/.my.cnf &> /dev/null \
			<<-EOT
			[client]
			password={{MYSQL_ROOT_PASSWORD}}
		EOT

		chown root:root \
			/root/.my.cnf
		chmod 0600 \
			/root/.my.cnf

		config="$(< /root/.my.cnf)"

		printf -- \
			'%s\n' \
			"${config//'{{MYSQL_ROOT_PASSWORD}}'/${password}}" \
			> /root/.my.cnf
	fi
}

function __create_lock ()
{
	if [[ -n ${lock_file} ]]
	then
		touch "${lock_file}"
	fi
}

function __create_state ()
{
	if [[ -n ${state_file} ]]
	then
		touch "${state_file}"
	fi
}

function __delete_lock ()
{
	if [[ -f ${lock_file} ]]
	then
		rm -f "${lock_file}"
	fi
}

function __get_mysql_init_limit ()
{
	local -r default_value="${1:-60}"

	local value="${MYSQL_INIT_LIMIT}"

	if ! __is_valid_mysql_init_limit "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_mysql_init_sql ()
{
	local -r default_value="${1:-"-- Custom Initialisation SQL"}"

	# CUSTOM_MYSQL_INIT_SQL is deprecated, use MYSQL_INIT_SQL
	local value="${MYSQL_INIT_SQL:-"${CUSTOM_MYSQL_INIT_SQL}"}"

	if ! __is_valid_mysql_init_sql "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_mysql_init_template ()
{
	local compact="false"
	local database
	local fifo_path
	local host
	local init_sql="-- Custom Initialisation SQL"
	local password_hashed="false"
	local -a pids
	local template_database="-- Create database"
	local template_identified_by="IDENTIFIED BY"
	local template_privileges="-- Grant privileges"
	local template_user="-- Create user"
	local user

	while [[ "${#}" -gt 0 ]]
	do
		case "${1}" in
			--compact|--compact=true)
				compact="true"
				shift 1
				;;
			--compact=*)
				compact="false"
				shift 1
				;;
			--database=*)
				database="${1#*=}"
				shift 1
				;;
			--host=*)
				host="${1#*=}"
				shift 1
				;;
			--init-sql=*)
				init_sql="${1#*=}"
				shift 1
				;;
			--password-hashed|--password-hashed=true)
				password_hashed="true"
				shift 1
				;;
			--password-hashed=*)
				password_hashed="false"
				shift 1
				;;
			--user=*)
				user="${1#*=}"
				shift 1
				;;
			*)
				shift 1
				;;
		esac
	done

	fifo_path="$(
		mktemp -d
	)"

	trap "__cleanup; \
			rm -rf \"${fifo_path}\";" \
		EXIT INT TERM

	mkfifo \
		-m 0600 \
		"${fifo_path}"/mysql-init-template

	if [[ -n ${database} ]]
	then
		printf \
			-v template_database \
			-- "%s\nCREATE DATABASE IF NOT EXISTS \`%s\`;" \
			"${template_database}" \
			"{{MYSQL_USER_DATABASE}}"
	fi

	if [[ -n ${user} ]] \
		&& [[ -n ${host} ]]
	then
		if [[ ${password_hashed} == true ]]
		then
			template_identified_by+=" PASSWORD"
		fi

		printf \
			-v template_user \
			-- "%s\nCREATE USER '%s'@'%s'\n%s '%s';" \
			"${template_user}" \
			"{{MYSQL_USER}}" \
			"{{MYSQL_USER_HOST}}" \
			"${template_identified_by}" \
			"{{MYSQL_USER_PASSWORD}}"
	fi

	if [[ -n ${user} ]] \
		&& [[ -n ${database} ]] \
		&& [[ -n ${host} ]]
	then
		printf \
			-v template_privileges \
			-- "%s\nGRANT %s\nON \`%s\`.*\nTO '%s'@'%s';" \
			"${template_privileges}" \
			"ALL PRIVILEGES" \
			"{{MYSQL_USER_DATABASE}}" \
			"{{MYSQL_USER}}" \
			"{{MYSQL_USER_HOST}}"
	fi

	# Each statement must be on a single line and should not include comments.
	# Append a newline character to SQL line ending characters ";".
	init_sql="${init_sql//; /;}"
	init_sql="${init_sql//;/;$'\n'}"
	init_sql="${init_sql/%$'\n'}"

	# Listen for the template and output as required
	if [[ ${compact} == true ]]
	then
		cat -s \
			<<-EOF | \
				sed \
					-e '/^[ \t]*--.*$/d' \
					-e 's/;[ \t]*--.*$/;/g' \
					-e '/^$/d' \
					| \
				awk \
					'{ ORS=( /;$/ ? RS:FS ) } 1' \
				&
			$(<"${fifo_path}"/mysql-init-template)
		
		EOF
	else
		cat <<-EOF &
			$(<"${fifo_path}"/mysql-init-template)
		
		EOF
	fi
	pids[1]="${!}"

	# Generate the initialisation SQL template
	cat \
		<<-EOT > "${fifo_path}"/mysql-init-template &
		
		-- =============================================================================
		-- Initialisation SQL
		-- -----------------------------------------------------------------------------
		-- Secure MySQL
		DROP DATABASE IF EXISTS test;
		DELETE FROM mysql.user WHERE User='' OR User='root' AND Host != 'localhost';
		DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
		${template_database}
		${template_user}
		-- =============================================================================
		-- Custom Initialisation SQL start
		-- 
		${init_sql}
		-- 
		-- Custom Initialisation SQL end
		-- -----------------------------------------------------------------------------
		${template_privileges}
		GRANT ALL PRIVILEGES
		ON *.*
		TO 'root'@'localhost' IDENTIFIED BY '{{MYSQL_ROOT_PASSWORD}}' WITH GRANT OPTION;
		-- -----------------------------------------------------------------------------
	EOT
	pids[2]="${!}"

	trap "__cleanup; \
			rm -rf \"${fifo_path}\"; \
			[[ ${pids[1]} -gt 0 ]] && kill -9 ${pids[1]}; \
			[[ ${pids[2]} -gt 0 ]] && kill -9 ${pids[2]};" \
		EXIT INT TERM

	set +e
	if [[ ${pids[1]} -gt 0 ]]
	then
		wait ${pids[1]}
	fi

	if [[ ${?} -ne 0 ]]
	then
		>&2 printf -- \
			'ERROR: %s failed to generate mysql-init-template - aborting\n' \
			"${0##*/}"
		exit 1
	fi
	set -e

	rm -rf \
		"${fifo_path}"

	trap - \
		EXIT INT TERM
}

function __get_mysql_root_password ()
{
	local -r default_value="${1:-"$(
		__get_password
	)"}"

	local value="${MYSQL_ROOT_PASSWORD}"

	if [[ -f ${value} ]]
	then
		value="$(< "${value}")"
	fi

	if ! __is_valid_mysql_root_password "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_mysql_root_password_hashed ()
{
	local -r default_value="${1:-false}"

	local value="${MYSQL_ROOT_PASSWORD_HASHED}"

	if ! __is_valid_mysql_root_password_hashed "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_mysql_subnet ()
{
	local -r default_value="${1:-127.0.0.1}"

	local value="${MYSQL_SUBNET}"

	if ! __is_valid_mysql_subnet "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_mysql_user ()
{
	local -r default_value="${1}"

	local value="${MYSQL_USER}"

	if ! __is_valid_mysql_user "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_mysql_user_database ()
{
	local -r default_value="${1}"

	local value="${MYSQL_USER_DATABASE}"

	if ! __is_valid_mysql_user_database "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_mysql_user_host ()
{
	local -r client_subnet="${1:-"$(
		__get_mysql_subnet
	)"}"

	local value

	case "${client_subnet}" in
		0.0.0.0|0.0.0.0/0.0.0.0)
			# Connect from any network
			value="%"
			;;
		127.0.0.1)
			# Internal connection
			value="localhost"
			;;
		*)
			# User defined host / subnet
			value="${client_subnet}"
			;;
	esac

	printf -- '%s' "${value}"
}

function __get_mysql_user_password ()
{
	local -r default_value="${1:-"$(
		__get_password
	)"}"

	local value="${MYSQL_USER_PASSWORD}"

	if [[ -f ${value} ]]
	then
		value="$(< "${value}")"
	fi

	if ! __is_valid_mysql_user_password "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_mysql_user_password_hashed ()
{
	local -r default_value="${1:-false}"

	local value="${MYSQL_USER_PASSWORD_HASHED}"

	if ! __is_valid_mysql_user_password_hashed "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_option ()
{
	local -r value="$(
		/usr/bin/my_print_defaults "${1}" \
		| sed -n "s/^--${2}=//p" \
		| tail -n 1
	)"

	printf -- '%s' "${value:-"${3}"}"
}

function __get_password ()
{
	local -r length="${1:-16}"
	local -r password="$(
		head -n 4096 /dev/urandom \
		| tr -cd '[:alnum:]' \
		| cut -c1-"${length}"
	)"

	printf -- '%s' "${password}"
}

function __get_timer_total ()
{
	local -r timer_end="$(
		date -u +%s.%N
	)"
	local -r timer_start="${1}"

	if [[ -z ${timer_start} ]] \
		|| [[ ${timer_start//.} -gt ${timer_end//.} ]]
	then
		>&2 printf -- \
			'ERROR: %s invalid timer start: %s\n' \
			"${0##*/}"
			"${timer_start}"
		printf -- \
			'0.000000'
	else
		awk \
			-v timer_end="${timer_end}" \
			-v timer_start="${timer_start}" \
			'BEGIN { print \
				timer_end - timer_start;
			}'
	fi
}

function __have_mysql_access ()
{
	local -r database="${3:-mysql}"
	local -r password="${2}"
	local -r user="${1:-root}"

	if [[ ${user} == root ]]
	then
		if mysql \
			--protocol=socket \
			--user="${user}" \
			-e "use ${database}" \
			2> /dev/null;
		then
			return 0
		fi
	else
		if mysql \
			--protocol=socket \
			--user="${user}" \
			--password="${password}" \
			-e "use ${database}" \
			2> /dev/null;
		then
			return 0
		fi
	fi

	return 1
}

function __init_datadir ()
{
	local -r directory="${1:-"$(
		__get_option \
			mysqld \
			datadir \
			"/var/lib/mysql"
	)"}"

	if command -v mysqld_safe &> /dev/null \
		&& command -v mysql_install_db &> /dev/null
	then
		mysql_install_db \
			--force \
			--log-warnings=0 \
			--skip-name-resolve \
			--skip-networking \
			--tmpdir="${directory}" \
			> /dev/null
	else
		mysqld \
			--datadir="${directory}" \
			--initialize-insecure \
			--log_error_verbosity=1 \
			--pid-file=/var/run/mysqld/mysqld.pid \
			--skip-name-resolve \
			--skip-networking \
			--tmpdir="${directory}" \
			--user=mysql
	fi
}

function __init_mysql ()
{
	local -r init_file="${1}"

	if [[ ! -f ${init_file} ]]
	then
		>&2 printf -- \
			'ERROR: %s invalid --init-file: %s\n' \
			"${0##*/}"
			"${init_file}"
		exit 1
	fi

	if command -v mysqld_safe &> /dev/null
	then
		mysqld_safe \
			--init-file="${init_file}" \
			--log-warnings=0 \
			--skip-networking
	else
		mysqld \
			--init-file="${init_file}" \
			--log_error_verbosity=1 \
			--pid-file=/var/run/mysqld/mysqld.pid \
			--skip-networking
	fi
}

function __init_mysql_completion ()
{
	local counter

	# Wait for initialisation to complete (poll for access) or timeout
	counter="$((
		2 * mysql_init_limit
	))"

	set +e
	until (( counter == 0 ))
	do
		sleep 0.5

		if __have_mysql_access
		then
			# Set the password if it was supplied pre-hashed.
			if [[ ${mysql_root_password_hashed} == true ]]
			then
				if command -v mysqld_safe &> /dev/null
				then
					# MySQL version < 5.7
					mysql \
						-e "SET PASSWORD = '${mysql_root_password}'"
				else
					# MySQL version >= 5.7
					mysql \
						-e "UPDATE mysql.user \
							SET authentication_string = '${mysql_root_password}' \
							WHERE User = 'root' \
							AND Host = 'localhost';"
				fi

				rm -f \
					/root/.{my,mylogin}.cnf
			fi

			break
		fi

		(( counter -= 1 ))
	done
	set -e

	if [[ ${counter} -eq 0 ]]
	then
		>&2 printf -- \
			'ERROR: %s initilisation timed out - aborting\n' \
			"${0##*/}"

		killall \
			-15 \
			mysqld

		exit 1
	else
		if [[ ${verbose} == true ]]
		then
			printf -- \
				'INFO: %s stopping mysqld\n' \
				"${0##*/}"
		fi

		# Prefer mysqladmin shutdown method if password is known
		if [[ ${mysql_root_password_hashed} == true ]]
		then
			killall \
				-w \
				-15 \
				mysqld
		else
			mysqladmin \
				--user=root \
				shutdown
		fi

		rm -rf \
			"${init_path}"
	fi
}

function __is_mysql_datadir_populated ()
{
	local -r directory="${1:-"$(
		__get_option \
			mysqld \
			datadir \
			"/var/lib/mysql"
	)"}"

	# Test for the InnoDB shared tablespace
	if [[ -f ${directory}/ibdata1 ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_mysql_init_limit ()
{
	local -r non_zero_integer='^[1-9][0-9]*$'
	local -r value="${1}"

	if [[ ${value} =~ ${non_zero_integer} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_mysql_init_sql ()
{
	local -r value="${1}"

	if ! [[ -z ${value} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_mysql_root_password ()
{
	local -r value="${1}"

	if ! [[ -z ${value} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_mysql_root_password_hashed ()
{
	local -r boolean_value='^(true|false)$'
	local -r value="${1}"

	if [[ ${value} =~ ${boolean_value} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_mysql_subnet ()
{
	local -r subnet_value='^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})?$'
	local -r value="${1}"

	if [[ ${value} =~ ${subnet_value} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_mysql_user ()
{
	local -r user_value='^.{1,32}$'
	local -r value="${1}"

	if [[ ${value} =~ ${user_value} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_mysql_user_database ()
{
	local -r database_value='^[^\./\\]{0,63}[^\./\\ ]$'
	local -r value="${1}"

	if [[ ${value} =~ ${database_value} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_mysql_user_password ()
{
	local -r value="${1}"

	if ! [[ -z ${value} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_mysql_user_password_hashed ()
{
	local -r boolean_value='^(true|false)$'
	local -r value="${1}"

	if [[ ${value} =~ ${boolean_value} ]]
	then
		return 0
	fi

	return 1
}

function __map_mysql_service_user_to_datadir ()
{
	local -r datadir="${1:-"$(
		__get_option \
			mysqld \
			datadir \
			"/var/lib/mysql"
	)"}"
	local -r service_user="${3:-"$(
		__get_option \
			mysqld \
			user \
			"mysql"
	)"}"
	local -r socket="${2:-"$(
		__get_option \
			mysqld \
			socket \
			"/var/run/mysqld/mysql.sock"
	)"}"
	local -r socket_directory="${socket%/*}"

	local datadir_gid
	local datadir_uid
	local service_user_gid
	local service_user_uid

	if [[ ! -d ${datadir} ]]
	then
		return 0
	fi

	datadir_gid="$(
		stat \
			-c \
			"%g" \
			"${datadir}"
	)"
	datadir_uid="$(
		stat \
			-c \
			"%u" \
			"${datadir}"
	)"
	service_user_gid="$(
		id \
			-g \
			"${service_user}"
	)"
	service_user_uid="$(
		id \
			-u \
			"${service_user}"
	)"

	if [[ ${datadir_gid} -gt 0 ]] \
		&& [[ ${datadir_gid} != ${service_user_gid} ]]
	then
		groupmod \
			-g \
			"${datadir_gid}" \
			"${service_user}"
	fi

	if [[ ${datadir_uid} -gt 0 ]] \
		&& [[ ${datadir_uid} != ${service_user_uid} ]]
	then
		usermod \
			-u \
			"${datadir_uid}" \
			"${service_user}"
		chown \
			-R \
			"${service_user}" \
			"${socket_directory}"
	fi
}

function main ()
{
	local -r lock_file="/var/lock/subsys/mysqld-bootstrap"
	local -r redacted_value="********"
	local -r state_file="/var/lib/misc/mysqld-bootstrap"
	local -r timer_start="$(
		date -u +%s.%N
	)"

	local datadir
	local init_file
	local init_path
	local init_template
	local mysql_init_limit
	local mysql_init_sql
	local mysql_root_password
	local mysql_root_password_hashed
	local mysql_user
	local mysql_user_database
	local mysql_user_host
	local mysql_user_password
	local mysql_user_password_hashed
	local -a pids
	local server_key_path
	local user_details
	local verbose="false"

	while [[ "${#}" -gt 0 ]]
	do
		case "${1}" in
			-v|--verbose)
				verbose="true"
				shift 1
				;;
		esac
	done

	if [[ -f ${state_file} ]]
	then
		if [[ ${verbose} == true ]]
		then
			printf -- \
				'INFO: %s finished - skipping\n' \
				"${0##*/}"
		fi
		exit 0
	fi

	if [[ -f ${lock_file} ]]
	then
		>&2 printf -- \
			'ERROR: %s lock detected - aborting\n' \
			"${0##*/}"
		exit 1
	fi

	trap "__cleanup" \
		EXIT INT TERM
	__create_lock

	datadir="$(
		__get_option \
			mysqld \
			datadir \
			"/var/lib/mysql"
	)"
	mysql_init_limit="$(
		__get_mysql_init_limit
	)"
	mysql_init_sql="$(
		__get_mysql_init_sql
	)"
	mysql_root_password="$(
		__get_mysql_root_password
	)"
	mysql_root_password_hashed="$(
		__get_mysql_root_password_hashed
	)"
	mysql_user="$(
		__get_mysql_user
	)"
	mysql_user_database="$(
		__get_mysql_user_database
	)"

	# User dependent
	if [[ -n ${mysql_user} ]]
	then
		mysql_user_host="$(
			__get_mysql_user_host
		)"
		mysql_user_password="$(
			__get_mysql_user_password
		)"
		mysql_user_password_hashed="$(
			__get_mysql_user_password_hashed
		)"
	fi

	# Certificate generation
	if [[ -x /usr/bin/mysql_ssl_rsa_setup ]] \
		&& [[ ! -f ${datadir}/server-key.pem ]]
	then
		if [[ ${verbose} == true ]]
		then
			printf -- \
				'INFO: %s generating certificates\n' \
				"${0##*/}"
		fi
		server_key_path="$(
			mktemp -d
		)"

		trap "__cleanup; \
				rm -rf \"${server_key_path}\";" \
			EXIT INT TERM

		/usr/bin/mysql_ssl_rsa_setup \
			--datadir="${server_key_path}" \
			--uid=mysql \
			2> /dev/null \
			&
		pids[2]="${!}"
	fi

	# Prepair initialisation path and file
	init_path="$(
		mktemp -d
	)"

	trap "__cleanup; \
			rm -rf \"${server_key_path}\"; \
			rm -rf \"${init_path}\";" \
		EXIT INT TERM

	chmod 750 \
		"${init_path}"
	chown root:mysql \
		"${init_path}"

	init_file="$(
		mktemp \
			--tmpdir="${init_path}"
	)"

	chmod 640 \
		"${init_file}"
	chown root:mysql \
		"${init_file}"

	# Initialisation is a one-shot process.
	if __is_mysql_datadir_populated "${datadir}"
	then
		if [[ ${verbose} == true ]]
		then
			printf -- \
				'INFO: %s skipping data directory initialisation\n' \
				"${0##*/}"
		fi

		if command -v mysqld_safe &> /dev/null
		then
			# MySQL version < 5.7.6
			printf -v \
				init_template \
				-- "SET PASSWORD FOR '%s'@'%s' = PASSWORD('%s');" \
				"root" \
				"localhost" \
				"{{MYSQL_ROOT_PASSWORD}}"
		else
			# MySQL version >= 5.7.6
			printf -v \
				init_template \
				-- "ALTER USER '%s'@'%s' IDENTIFIED BY '%s';" \
				"root" \
				"localhost" \
				"{{MYSQL_ROOT_PASSWORD}}"
		fi

		if [[ ${verbose} == true ]]
		then
			printf -- \
				'INFO: %s initialising\n' \
				"${0##*/}"
		fi

		printf -- \
			'%s\n' \
			"${init_template//'{{MYSQL_ROOT_PASSWORD}}'/${mysql_root_password}}" \
			> "${init_file}"

		__init_mysql \
			"${init_file}" \
			&

		if [[ ${mysql_root_password_hashed} != true ]]
		then
			__configure_mysql_client_root_password \
				"${mysql_root_password}"
		fi

		# Restore appropriate trap
		if [[ -d ${server_key_path} ]]
		then
			trap "__cleanup; \
					rm -rf \"${server_key_path}\"; \
					rm -rf \"${init_path}\";" \
				EXIT INT TERM
		else
			trap "__cleanup; \
				rm -rf \"${init_path}\";" \
				EXIT INT TERM
		fi

		__init_mysql_completion

		# Restore appropriate trap
		if [[ -d ${server_key_path} ]]
		then
			trap "__cleanup; \
					rm -rf \"${server_key_path}\"; \
					rm -rf \"${init_path}\";" \
				EXIT INT TERM
		else
			trap "__cleanup; \
				rm -rf \"${init_path}\";" \
				EXIT INT TERM
		fi

		# Wait to complete certificate generation
		if [[ ${pids[2]} -gt 0 ]]
		then
			wait ${pids[2]}
		fi
	else
		if [[ ${verbose} == true ]]
		then
			printf -- \
				'INFO: %s initialising data directory\n' \
				"${0##*/}"
		fi
		__init_datadir \
			"${datadir}" \
			&
		pids[0]="${!}"

		# Adjust the UID/GID values of the service user to match a directory
		# that could be a mounted volume
		__map_mysql_service_user_to_datadir \
			"${datadir}" \
			&
		pids[1]="${!}"

		# Replace compact template placeholders with values
		init_template="$(
			__get_mysql_init_template \
				--user="${mysql_user}" \
				--database="${mysql_user_database}" \
				--host="${mysql_user_host}" \
				--password-hashed="${mysql_user_password_hashed}" \
				--init-sql="${mysql_init_sql}" \
				--compact
		)"

		trap "__cleanup; \
				rm -rf \"${server_key_path}\"; \
				rm -rf \"${init_path}\";" \
			EXIT INT TERM

		init_template="${init_template//'{{MYSQL_USER}}'/${mysql_user}}"
		init_template="${init_template//'{{MYSQL_USER_DATABASE}}'/${mysql_user_database}}"
		init_template="${init_template//'{{MYSQL_USER_HOST}}'/${mysql_user_host}}"
		init_template="${init_template//'{{MYSQL_USER_PASSWORD}}'/${mysql_user_password}}"
		init_template="${init_template//'{{MYSQL_ROOT_PASSWORD}}'/${mysql_root_password}}"

		if [[ ${verbose} == true ]]
		then
			printf -- \
				'INFO: %s initialising\n' \
				"${0##*/}"
		fi

		printf -- \
			'%s\n' \
			"${init_template}" \
			> "${init_file}"

		# Wait to complete system table installation
		if [[ ${pids[0]} -gt 0 ]]
		then
			wait ${pids[0]}
		fi

		__init_mysql \
			"${init_file}" \
			&

		__configure_mysql_client_root_password \
			"${mysql_root_password}"

		trap "__cleanup; \
				rm -rf \"${server_key_path}\"; \
				rm -rf \"${init_path}\";" \
			EXIT INT TERM

		__init_mysql_completion

		trap "__cleanup; \
				rm -rf \"${server_key_path}\";" \
			EXIT INT TERM

		# Local root user details
		if [[ ${verbose} == true ]]
		then
			printf \
				-v user_details \
				-- "user : %s@%s, password : %s" \
				root \
				localhost \
				"${redacted_value}"
		fi

		if [[ -n ${mysql_user} ]]
		then
			# Redact operator supplied password
			if [[ -n ${MYSQL_USER_PASSWORD} ]]
			then
				mysql_user_password="${redacted_value}"
			fi

			if [[ ${verbose} == true ]]
			then
				printf \
					-v user_details \
					-- "%s\nuser : %s@%s, password : %s" \
					"${user_details}" \
					"${mysql_user}" \
					"${mysql_user_host}" \
					"${mysql_user_password}"
			else
				printf \
					-v user_details \
					-- "user : %s@%s, password : %s" \
					"${mysql_user}" \
					"${mysql_user_host}" \
					"${mysql_user_password}"
			fi
		fi

		# Wait for the service user modifications to complete
		if [[ ${pids[1]} -gt 0 ]]
		then
			wait ${pids[1]}
		fi

		# Wait to complete certificate generation
		if [[ ${pids[2]} -gt 0 ]]
		then
			wait ${pids[2]}
		fi

		if [[ ${verbose} == true ]]
		then
			timer_total="$(
				__get_timer_total \
					"${timer_start}"
			)"

			cat \
				<<-EOT

				================================================================================
				MySQL Details
				--------------------------------------------------------------------------------
				database : ${mysql_user_database:-N/A}
				${user_details}
				--------------------------------------------------------------------------------
				${timer_total}

			EOT
		elif [[ ${mysql_user_password} != "${redacted_value}" ]]
		then
			cat \
				<<-EOT

				================================================================================
				MySQL Details
				--------------------------------------------------------------------------------
				${user_details}
				--------------------------------------------------------------------------------

			EOT
		fi
	fi

	# Finalise certificate setup
	if [[ -d ${server_key_path} ]] \
		&& [[ -f ${server_key_path}/server-key.pem ]]
	then
		mv -f \
			"${server_key_path}"/*.pem \
			"${datadir}"/
	fi

	# Trigger cleanup trap.
	exit 0
}

main "${@}"
